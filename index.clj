{:namespaces
 ({:source-url nil,
   :wiki-url "cljain.dum-api.html",
   :name "cljain.dum",
   :author "ruiyun",
   :doc
   "The SIP DSL by Clojure.\nHere is a simplest example show how to use it:\n\n  (use 'cljain.dum)\n  (require '[cljain.sip.core :as sip]\n    '[cljain.sip.address :as addr])\n\n  (defmethod handle-request :MESSAGE [request & [transaction]]\n    (println \"Received: \" (.getContent request))\n    (send-response! 200 :in transaction :pack \"I receive the message from myself.\"))\n\n  (global-set-account :user \"bob\" :domain \"localhost\" :display-name \"Bob\" :password \"thepwd\")\n  (sip/global-bind-sip-provider! (sip/sip-provider! \"my-app\" \"localhost\" 5060 \"udp\"))\n  (sip/set-listener! (dum-listener))\n  (sip/start!)\n\n  (send-request! :MESSAGE :to (addr/address \"sip:bob@localhost\") :pack \"Hello, Bob.\"\n    :on-success (fn [& {:keys [response]}] (println \"Fine! response: \" (.getContent response)))\n    :on-failure (fn [& {:keys [response]}] (println \"Oops!\" (.getStatusCode response)))\n    :on-timeout (fn [_] (println \"Timeout, try it later.\")))\n\nRemember, if you want send REGISTER to sip registry, please use the 'register-to' function, that will\nhelp you to deal the automatic rigister refresh:\n\n  (register-to (addr/address \"sip:the-registry\") 3600\n    :on-success #(prn \"Register success.\")\n    :on-failure #(prn \"Register failed.\")\n    :on-refreshed #(prn \"Refreshed fine.\")\n    :on-refresh-failed #(prn \"Refresh failed.\"))\n\nThis version cljain.dum has some limitation that if you want auto-refresh work correctly, you must use\n'global-set-account' to give a root binding with *current-account* like previous."}
  {:source-url nil,
   :wiki-url "cljain.sip.address-api.html",
   :name "cljain.sip.address",
   :author "ruiyun",
   :doc nil}
  {:source-url nil,
   :wiki-url "cljain.sip.core-api.html",
   :name "cljain.sip.core",
   :author "ruiyun",
   :doc nil}
  {:source-url nil,
   :wiki-url "cljain.sip.dialog-api.html",
   :name "cljain.sip.dialog",
   :author "ruiyun",
   :doc nil}
  {:source-url nil,
   :wiki-url "cljain.sip.header-api.html",
   :name "cljain.sip.header",
   :author "ruiyun",
   :doc nil}
  {:source-url nil,
   :wiki-url "cljain.sip.message-api.html",
   :name "cljain.sip.message",
   :author "ruiyun",
   :doc nil}
  {:source-url nil,
   :wiki-url "cljain.sip.transaction-api.html",
   :name "cljain.sip.transaction",
   :author "ruiyun",
   :doc nil}),
 :vars
 ({:name "*current-account*",
   :namespace "cljain.dum",
   :source-url nil,
   :dynamic true,
   :added "0.4.0",
   :raw-source-url nil,
   :wiki-url "/cljain.dum-api.html#cljain.dum/*current-account*",
   :doc
   "A map contain these four fields: :user, :domain, :password and :display-name.",
   :var-type "var",
   :line 52,
   :file "src/cljain/dum.clj"}
  {:arglists ([]),
   :name "dum-listener",
   :namespace "cljain.dum",
   :source-url nil,
   :added "0.4.0",
   :raw-source-url nil,
   :wiki-url "/cljain.dum-api.html#cljain.dum/dum-listener",
   :doc
   "Create a dum default event listener.\nYou can use it for 'cljain.sip.core/set-listener!' function.",
   :var-type "function",
   :line 75,
   :file "src/cljain/dum.clj"}
  {:arglists
   ([& {:keys [user domain password display-name], :as account}]),
   :name "global-set-account",
   :namespace "cljain.dum",
   :source-url nil,
   :added "0.4.0",
   :raw-source-url nil,
   :wiki-url "/cljain.dum-api.html#cljain.dum/global-set-account",
   :doc
   "Give the *current-account* a root binding.\nAlthough you can use the clojure dynamic binding form, but use this function in this version\ncljian.dum is more recommended.",
   :var-type "function",
   :line 57,
   :file "src/cljain/dum.clj"}
  {:arglists ([content]),
   :name "legal-content?",
   :namespace "cljain.dum",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.dum-api.html#cljain.dum/legal-content?",
   :doc
   "Check the content is a string or a map with :type, :sub-type, :length and :content keys.",
   :var-type "function",
   :line 109,
   :file "src/cljain/dum.clj"}
  {:arglists
   ([registry-address
     expires-seconds
     &
     {:keys [on-success on-failure on-refreshed on-refresh-failed]}]),
   :name "register-to",
   :namespace "cljain.dum",
   :source-url nil,
   :added "0.3.0",
   :raw-source-url nil,
   :wiki-url "/cljain.dum-api.html#cljain.dum/register-to",
   :doc
   "Send REGISTER sip message to target registry server, and auto refresh register before\nexpired.\n\nNotice: please call 'global-set-account' before you call 'register-to'. in this version,\nuse dynamic binding form to bind *current-account* can not work for auto-refresh.",
   :var-type "function",
   :line 222,
   :file "src/cljain/dum.clj"}
  {:arglists
   ([message
     &
     {content :pack,
      to-address :to,
      transport :use,
      dialog :in,
      more-headers :more-headers,
      on-success :on-success,
      on-failure :on-failure,
      on-timeout :on-timeout}]),
   :name "send-request!",
   :namespace "cljain.dum",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.dum-api.html#cljain.dum/send-request!",
   :doc
   "Fluent style sip message send function.\n\nThe simplest example just send a trivial MESSAGE:\n\n  (send-request! :MESSAGE :to (sip-address \"192.168.1.128\"))\n  (send-request! :INFO :in dialog-with-bob)\n\nMore complicate example:\n\n  (send-request! \"MESSAGE\" :pack \"Welcome\" :to (sip-address \"192.168.1.128\" :user \"bob\") :use \"UDP\"\n    :on-success #(prn %1 %2 %3) :on-failure #(prn %1 %2 %3) :on-timeout #(prn %))\n\nIf the pack content is not just a trivial string, provide a well named funciont\nto return a content map like this is recommended:\n\n  {:type \"application\"\n   :sub-type \"pidf-diff+xml\"\n   :content content-object}",
   :var-type "function",
   :line 129,
   :file "src/cljain/dum.clj"}
  {:arglists
   ([status-code
     &
     {transaction :in,
      content :pack,
      transport :use,
      more-headers :more-headers}]),
   :name "send-response!",
   :namespace "cljain.dum",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.dum-api.html#cljain.dum/send-response!",
   :doc "Send response with a server transactions.",
   :var-type "function",
   :line 197,
   :file "src/cljain/dum.clj"}
  {:arglists ([registry-address]),
   :name "unregister-to",
   :namespace "cljain.dum",
   :source-url nil,
   :added "0.3.0",
   :raw-source-url nil,
   :wiki-url "/cljain.dum-api.html#cljain.dum/unregister-to",
   :doc
   "Send REGISTER sip message with expires 0 for unregister.\nAnd the auto-refresh timer will be canceled.",
   :var-type "function",
   :line 264,
   :file "src/cljain/dum.clj"}
  {:arglists ([uri] [uri display-name]),
   :name "address",
   :namespace "cljain.sip.address",
   :source-url nil,
   :added "0.1.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.address-api.html#cljain.sip.address/address",
   :doc
   "Create a new Address object using a URI.\nIt useful to create the To header etc.",
   :var-type "function",
   :line 36,
   :file "src/cljain/sip/address.clj"}
  {:arglists ([object]),
   :name "address?",
   :namespace "cljain.sip.address",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.address-api.html#cljain.sip.address/address?",
   :doc "Check the 'obj' is an instance of javax.sip.Address.",
   :var-type "function",
   :line 64,
   :file "src/cljain/sip/address.clj"}
  {:arglists
   ([host & {:keys [user port transport display-name], :as options}]),
   :name "sip-address",
   :namespace "cljain.sip.address",
   :source-url nil,
   :added "0.4.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.address-api.html#cljain.sip.address/sip-address",
   :doc
   "A convenient way to create a new Address object that limited to sip uri.\n\n(sip-address \"localhost\" :user \"tom\" :display-name \"Tom\" :port 5060 :transport \"udp\")",
   :var-type "function",
   :line 47,
   :file "src/cljain/sip/address.clj"}
  {:arglists ([host & {:keys [user port transport]}]),
   :name "sip-uri",
   :namespace "cljain.sip.address",
   :source-url nil,
   :added "0.1.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.address-api.html#cljain.sip.address/sip-uri",
   :doc
   "Create a new SipURI object.\n\n(sip-uri \"localhost\" :port 5060 :transport \"udp\" :user \"tom\")",
   :var-type "function",
   :line 13,
   :file "src/cljain/sip/address.clj"}
  {:arglists ([phone-number]),
   :name "tel-uri",
   :namespace "cljain.sip.address",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.address-api.html#cljain.sip.address/tel-uri",
   :doc
   "Create a new TelURI object with a phone number.\n\n(tel-uri 12345678) or (tel-uri \"12345678\")",
   :var-type "function",
   :line 28,
   :file "src/cljain/sip/address.clj"}
  {:arglists ([address]),
   :name "uri-from-address",
   :namespace "cljain.sip.address",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.address-api.html#cljain.sip.address/uri-from-address",
   :doc
   "DEPRECATED: Use Java method 'getURI' directly instead.\nGet the URI member from a Address object.",
   :var-type "function",
   :line 56,
   :file "src/cljain/sip/address.clj"}
  {:arglists ([object]),
   :name "uri?",
   :namespace "cljain.sip.address",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.address-api.html#cljain.sip.address/uri?",
   :doc "Check the 'obj' is an instance of javax.sip.URI.",
   :var-type "function",
   :line 70,
   :file "src/cljain/sip/address.clj"}
  {:name "*sip-provider*",
   :namespace "cljain.sip.core",
   :source-url nil,
   :dynamic true,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.core-api.html#cljain.sip.core/*sip-provider*",
   :doc
   "Before call any function expect 'sip-provider!' in the cljain.sip.core namespace,\nplease binding *sip-provider* with the current provider object first.",
   :var-type "var",
   :line 14,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([]),
   :name "already-bound-provider?",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.core-api.html#cljain.sip.core/already-bound-provider?",
   :doc
   "Check whether the *sip-provider* has been bound in current thread.",
   :var-type "function",
   :line 37,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([object]),
   :name "dialog?",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.4.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/dialog?",
   :doc "Check the obj is an instance of javax.sip.Dialog",
   :var-type "function",
   :line 210,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([]),
   :name "gen-call-id-header",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.core-api.html#cljain.sip.core/gen-call-id-header",
   :doc "Generate a new Call-ID header use current bound provider.",
   :var-type "function",
   :line 171,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([provider]),
   :name "global-bind-sip-provider!",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.core-api.html#cljain.sip.core/global-bind-sip-provider!",
   :doc "Bind the sip-provider in global scope.",
   :var-type "function",
   :line 25,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([]),
   :name "global-unbind-sip-provider!",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.core-api.html#cljain.sip.core/global-unbind-sip-provider!",
   :doc "Unbind the sip-provider in global scope.",
   :var-type "function",
   :line 31,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([] [transport]),
   :name "listening-point",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.core-api.html#cljain.sip.core/listening-point",
   :doc
   "Get the current bound listening ip, port and transport information.",
   :var-type "function",
   :line 75,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([request]),
   :name "new-client-transcation!",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.core-api.html#cljain.sip.core/new-client-transcation!",
   :doc
   "Before an application can send a new request it must first request\na new client transaction to handle that Request.",
   :var-type "function",
   :line 190,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([transaction]),
   :name "new-dialog!",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/new-dialog!",
   :doc "Create a dialog for the given transaction.",
   :var-type "function",
   :line 204,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([request]),
   :name "new-server-transaction!",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.core-api.html#cljain.sip.core/new-server-transaction!",
   :doc
   "An application has the responsibility of deciding to respond to a Request\nthat does not match an existing server transaction.",
   :var-type "function",
   :line 183,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([]),
   :name "provider-can-be-found?",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.core-api.html#cljain.sip.core/provider-can-be-found?",
   :doc
   "Check where the *sip-provider* has been bound or global sip-provider has been set.",
   :var-type "function",
   :line 43,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([request]),
   :name "send-request!",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/send-request!",
   :doc "Send out of dialog SipRequest use current bound provider.",
   :var-type "function",
   :line 177,
   :file "src/cljain/sip/core.clj"}
  {:arglists
   ([{:keys
      [request
       response
       timeout
       io-exception
       transaction-terminated
       dialog-terminated]}]),
   :name "set-listener!",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/set-listener!",
   :doc
   "Set several event listening function to current bound provider.\nBecause JAIN-SIP just allow set listener once, if call 'set-listener' more then one times,\nan exception will be thrown.",
   :var-type "function",
   :line 130,
   :file "src/cljain/sip/core.clj"}
  {:name "sip-factory",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/sip-factory",
   :doc "The instance of JAIN-SIP SipFactory.",
   :var-type "var",
   :line 10,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([]),
   :name "sip-provider",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/sip-provider",
   :doc "Get the current bound *sip-provider* or global-sip-provider.",
   :var-type "function",
   :line 49,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([name ip port transport & properties]),
   :name "sip-provider!",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/sip-provider!",
   :doc
   "Create a new SipProvider with meaningful name, local ip, port, transport and other optional SipStack properties.\nRember, the name must be unique to make a distinction between other provider.\nTo set standard SipStack properties, use the property's lowcase short name as keyword.\nIf want to set the nist define property, let property keys lead with 'nist'.\n\n(sip-provider! \"cool-phone\" \"192.168.1.2\" 5060 \"UDP\" :outbound-proxy \"192.168.1.128\")\n\nMore SipStack properties document can be found here:\nhttp://hudson.jboss.org/hudson/job/jain-sip/lastSuccessfulBuild/artifact/javadoc/index.html\nand\nhttp://hudson.jboss.org/hudson/job/jain-sip/lastSuccessfulBuild/artifact/javadoc/index.html",
   :var-type "function",
   :line 81,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([]),
   :name "sip-stack",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/sip-stack",
   :doc "Get the SipStack object from a SipProvider object.",
   :var-type "function",
   :line 57,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([]),
   :name "stack-name",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/stack-name",
   :doc "Get the SipStack name from a SipProvider object.",
   :var-type "function",
   :line 63,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([]),
   :name "start!",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/start!",
   :doc
   "Start to run the stack which bound with current bound provider.",
   :var-type "function",
   :line 157,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([]),
   :name "stop-and-release!",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.core-api.html#cljain.sip.core/stop-and-release!",
   :doc
   "Stop the stack wich bound with current bound provider. And release all resource associated the stack.\nBecareful, after called 'stop!' function, all other function include 'start!' will be invalid.\nA new provider need be generated for later call.",
   :var-type "function",
   :line 163,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([object]),
   :name "transaction?",
   :namespace "cljain.sip.core",
   :source-url nil,
   :added "0.4.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.core-api.html#cljain.sip.core/transaction?",
   :doc
   "Check the obj is an instance of javax.sip.Transaction.\nBoth ClientTransaction and ServerTransaction are pass.",
   :var-type "function",
   :line 197,
   :file "src/cljain/sip/core.clj"}
  {:arglists ([dialog seq-num]),
   :name "ack",
   :namespace "cljain.sip.dialog",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.dialog-api.html#cljain.sip.dialog/ack",
   :doc
   "DEPRECATED: Use Java method 'createAck' directly instead.\nCreates an ACK request for an Invite that was responded with 2xx response.\nThe cseq number for the invite is supplied to relate the ACK to its original invite request.",
   :var-type "function",
   :line 52,
   :file "src/cljain/sip/dialog.clj"}
  {:arglists ([dialog]),
   :name "application-data",
   :namespace "cljain.sip.dialog",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.dialog-api.html#cljain.sip.dialog/application-data",
   :doc
   "DEPRECATED: Use Java method 'getApplicationData' directly instead.\nGets the application specific data specific to this dialog.",
   :var-type "function",
   :line 17,
   :file "src/cljain/sip/dialog.clj"}
  {:arglists ([dialog method]),
   :name "create-request",
   :namespace "cljain.sip.dialog",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.dialog-api.html#cljain.sip.dialog/create-request",
   :doc
   "DEPRECATED: Use Java method 'createRequest' directly instead.\nCreates a new Request message based on the dialog creating request.",
   :var-type "function",
   :line 33,
   :file "src/cljain/sip/dialog.clj"}
  {:arglists ([object]),
   :name "dialog?",
   :namespace "cljain.sip.dialog",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.dialog-api.html#cljain.sip.dialog/dialog?",
   :doc
   "DEPRECATED: Use 'cljain.core/dialog?' instead.\nCheck the obj is an instance of javax.sip.Dialog",
   :var-type "function",
   :line 9,
   :file "src/cljain/sip/dialog.clj"}
  {:arglists ([dialog ack]),
   :name "send-ack!",
   :namespace "cljain.sip.dialog",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.dialog-api.html#cljain.sip.dialog/send-ack!",
   :doc
   "DEPRECATED: Use Java method 'sendAck' directly instead.\nSends ACK Request to the remote party of this dialog.\nThis method implies that the application is functioning as User Agent Client\nhence the underlying SipProvider acts statefully.\nThis method does not increment the local sequence number.",
   :var-type "function",
   :line 62,
   :file "src/cljain/sip/dialog.clj"}
  {:arglists ([dialog transaction]),
   :name "send-request!",
   :namespace "cljain.sip.dialog",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.dialog-api.html#cljain.sip.dialog/send-request!",
   :doc
   "DEPRECATED: Use Java method 'sendRequest' directly instead.\nSends a Request to the remote party of this dialog.",
   :var-type "function",
   :line 41,
   :file "src/cljain/sip/dialog.clj"}
  {:arglists ([dialog data]),
   :name "set-application-data",
   :namespace "cljain.sip.dialog",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.dialog-api.html#cljain.sip.dialog/set-application-data",
   :doc
   "DEPRECATED: Use Java method 'setApplicationData' directly instead.\nSets application specific data to this dialog.",
   :var-type "function",
   :line 25,
   :file "src/cljain/sip/dialog.clj"}
  {:arglists ([content-type sub-type]),
   :name "accept",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/accept",
   :doc "Create a new AcceptHeader",
   :var-type "function",
   :line 42,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([encoding]),
   :name "accept-encoding",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/accept-encoding",
   :doc "Create a new AcceptEncodingHeader",
   :var-type "function",
   :line 43,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([language]),
   :name "accept-language",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/accept-language",
   :doc "Create a new AcceptLanguageHeader",
   :var-type "function",
   :line 44,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([info]),
   :name "alert-info",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/alert-info",
   :doc "Create a new AlertInfoHeader",
   :var-type "function",
   :line 45,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([method]),
   :name "allow",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/allow",
   :doc "Create a new AllowHeader",
   :var-type "function",
   :line 46,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([event-type]),
   :name "allow-events",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/allow-events",
   :doc "Create a new AllowEventsHeader",
   :var-type "function",
   :line 47,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([response]),
   :name "authentication-info",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/authentication-info",
   :doc "Create a new AuthenticationInfoHeader",
   :var-type "function",
   :line 48,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([scheme]),
   :name "authorization",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/authorization",
   :doc "Create a new AuthorizationHeader",
   :var-type "function",
   :line 49,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([number method]),
   :name "c-seq",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/c-seq",
   :doc "Create a new CSeqHeader",
   :var-type "function",
   :line 50,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([id]),
   :name "call-id",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/call-id",
   :doc "Create a new CallIdHeader",
   :var-type "function",
   :line 51,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([info]),
   :name "call-info",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/call-info",
   :doc "Create a new CallInfoHeader",
   :var-type "function",
   :line 52,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([address]),
   :name "contact",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/contact",
   :doc "Create a new ContactHeader",
   :var-type "function",
   :line 53,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([disposition-type]),
   :name "content-disposition",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/content-disposition",
   :doc "Create a new ContentDispositionHeader",
   :var-type "function",
   :line 54,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([encoding]),
   :name "content-encoding",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/content-encoding",
   :doc "Create a new ContentEncodingHeader",
   :var-type "function",
   :line 55,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([language]),
   :name "content-language",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/content-language",
   :doc "Create a new ContentLanguageHeader",
   :var-type "function",
   :line 56,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([length]),
   :name "content-length",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/content-length",
   :doc "Create a new ContentLengthHeader",
   :var-type "function",
   :line 57,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([type sub-type]),
   :name "content-type",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/content-type",
   :doc "Create a new ContentTypeHeader",
   :var-type "function",
   :line 58,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([date]),
   :name "date",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/date",
   :doc "Create a new DateHeader",
   :var-type "function",
   :line 59,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([name [args*]]),
   :name "defheader",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/defheader",
   :doc
   "Use the macro to define sip headers. More document could be found here\nhttp://hudson.jboss.org/hudson/job/jain-sip/lastSuccessfulBuild/artifact/javadoc/index.html",
   :var-type "macro",
   :line 29,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([info]),
   :name "error-info",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/error-info",
   :doc "Create a new ErrorInfoHeader",
   :var-type "function",
   :line 60,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([type]),
   :name "event",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/event",
   :doc "Create a new EventHeader",
   :var-type "function",
   :line 61,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([seconds]),
   :name "expires",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/expires",
   :doc "Create a new ExpiresHeader",
   :var-type "function",
   :line 62,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([name value]),
   :name "extension",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/extension",
   :doc
   "Creates a new Header based on the newly supplied name and value values.",
   :var-type "function",
   :line 123,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([address tag]),
   :name "from",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/from",
   :doc "Create a new FromHeader",
   :var-type "function",
   :line 63,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([]),
   :name "gen-branch",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/gen-branch",
   :doc "Generate a new branch id string.",
   :var-type "function",
   :line 23,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([]),
   :name "gen-tag",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/gen-tag",
   :doc "Generate a new tag string.",
   :var-type "function",
   :line 17,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([header]),
   :name "get-address",
   :namespace "cljain.sip.header",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/get-address",
   :doc "DEPRECATED: Use Java method 'getAddress' directly instead.",
   :var-type "function",
   :line 129,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([object]),
   :name "header?",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/header?",
   :doc "Check whether the object is a Header or not",
   :var-type "function",
   :line 136,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([call-id]),
   :name "in-reply-to",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/in-reply-to",
   :doc "Create a new InReplyToHeader",
   :var-type "function",
   :line 64,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([number]),
   :name "max-forwards",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/max-forwards",
   :doc "Create a new MaxForwardsHeader",
   :var-type "function",
   :line 65,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([major minor]),
   :name "mime-version",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/mime-version",
   :doc "Create a new MimeVersionHeader",
   :var-type "function",
   :line 66,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([seconds]),
   :name "min-expires",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/min-expires",
   :doc "Create a new MinExpiresHeader",
   :var-type "function",
   :line 67,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([value]),
   :name "organization",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/organization",
   :doc "Create a new OrganizationHeader",
   :var-type "function",
   :line 68,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([value]),
   :name "priority",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/priority",
   :doc "Create a new PriorityHeader",
   :var-type "function",
   :line 69,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([scheme]),
   :name "proxy-authenticate",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/proxy-authenticate",
   :doc "Create a new ProxyAuthenticateHeader",
   :var-type "function",
   :line 70,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([scheme]),
   :name "proxy-authorization",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/proxy-authorization",
   :doc "Create a new ProxyAuthorizationHeader",
   :var-type "function",
   :line 71,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([option-tag]),
   :name "proxy-require",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/proxy-require",
   :doc "Create a new ProxyRequireHeader",
   :var-type "function",
   :line 72,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([r-seq c-seq method]),
   :name "r-ack",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/r-ack",
   :doc "Create a new RAckHeader",
   :var-type "function",
   :line 73,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([number]),
   :name "r-seq",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/r-seq",
   :doc "Create a new RSeqHeader",
   :var-type "function",
   :line 74,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([protocol cause text]),
   :name "reason",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/reason",
   :doc "Create a new ReasonHeader",
   :var-type "function",
   :line 75,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([address]),
   :name "record-route",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/record-route",
   :doc "Create a new RecordRouteHeader",
   :var-type "function",
   :line 76,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([address]),
   :name "refer-to",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/refer-to",
   :doc "Create a new ReferToHeader",
   :var-type "function",
   :line 77,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([address]),
   :name "reply-to",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/reply-to",
   :doc "Create a new ReplyToHeader",
   :var-type "function",
   :line 78,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([option-tag]),
   :name "require",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/require",
   :doc "Create a new RequireHeader",
   :var-type "function",
   :line 79,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([seconds]),
   :name "retry-after",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/retry-after",
   :doc "Create a new RetryAfterHeader",
   :var-type "function",
   :line 80,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([address]),
   :name "route",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/route",
   :doc "Create a new RouteHeader",
   :var-type "function",
   :line 81,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([header]),
   :name "sequence-number",
   :namespace "cljain.sip.header",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.3.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/sequence-number",
   :doc
   "DEPRECATED: Use Java method 'getSequenceNumber' directly instead.\nGet the sequence number from a CSeq header.",
   :var-type "function",
   :line 142,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([product]),
   :name "server",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/server",
   :doc "Create a new ServerHeader",
   :var-type "function",
   :line 82,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([etag]),
   :name "sip-etag",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/sip-etag",
   :doc "Creates a new SIP-ETag header with the supplied tag value",
   :var-type "function",
   :line 93,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([etag]),
   :name "sip-if-match",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/sip-if-match",
   :doc
   "Creates a new SIP-If-Match header with the supplied tag value",
   :var-type "function",
   :line 99,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([subject]),
   :name "subject",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/subject",
   :doc "Create a new SubjectHeader",
   :var-type "function",
   :line 83,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([state]),
   :name "subscription-state",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/subscription-state",
   :doc "Create a new SubscriptionStateHeader",
   :var-type "function",
   :line 84,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([option-tag]),
   :name "supported",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/supported",
   :doc "Create a new SupportedHeader",
   :var-type "function",
   :line 85,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([time]),
   :name "time-stamp",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/time-stamp",
   :doc "Create a new TimeStampHeader",
   :var-type "function",
   :line 86,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([address tag]),
   :name "to",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/to",
   :doc "Create a new ToHeader",
   :var-type "function",
   :line 87,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([option-tag]),
   :name "unsupported",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/unsupported",
   :doc "Create a new UnsupportedHeader",
   :var-type "function",
   :line 88,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([product]),
   :name "user-agent",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/user-agent",
   :doc "Create a new UserAgentHeader",
   :var-type "function",
   :line 89,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([host port transport branch]),
   :name "via",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/via",
   :doc "Create a new ViaHeader",
   :var-type "function",
   :line 90,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([agent code comment]),
   :name "warning",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.header-api.html#cljain.sip.header/warning",
   :doc "Create a new WarningHeader",
   :var-type "function",
   :line 91,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([]),
   :name "wildcard-contact",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/wildcard-contact",
   :doc
   "Creates a new wildcard ContactHeader.\nThis is used in Register requests to indicate to the server that it should remove all locations the at which\nthe user is currently available. This implies that the following conditions are met:\n\nContactHeader.getAddress.getUserInfo() == *;\nContactHeader.getAddress.isWildCard() == true;\nContactHeader.getExpires() == 0;",
   :var-type "function",
   :line 105,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([scheme]),
   :name "www-authenticate",
   :namespace "cljain.sip.header",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.header-api.html#cljain.sip.header/www-authenticate",
   :doc
   "Creates a new WWWAuthenticateHeader based on the newly supplied scheme value.",
   :var-type "function",
   :line 117,
   :file "src/cljain/sip/header.clj"}
  {:arglists ([message header]),
   :name "add-header!",
   :namespace "cljain.sip.message",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.message-api.html#cljain.sip.message/add-header!",
   :doc
   "DEPRECATED: Use Java method 'addHeader' directly instead.\nThe Header is added to the end of the List and will appear in that order in the SIP Message.\nRequired Headers that are singletons should not be added to the message as they already\nexist in the message and therefore should be changed using the 'set-header!' method.\n\nThis method should be used to support the special case of adding required ViaHeaders to a message.\nWhen adding a ViaHeader using this method the implementation will add the ViaHeader to the\ntop of the ViaHeader list, and not the end like all other Headers.",
   :var-type "function",
   :line 68,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([message]),
   :name "content",
   :namespace "cljain.sip.message",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.3.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.message-api.html#cljain.sip.message/content",
   :doc
   "DEPRECATED: Use Java method 'getContent' directly instead.\nGets the body content of the Message as an Object.",
   :var-type "function",
   :line 96,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([message header-name]),
   :name "header",
   :namespace "cljain.sip.message",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.message-api.html#cljain.sip.message/header",
   :doc
   "DEPRECATED: Use Java method 'getHeader' directly instead.\nGets the Header of the specified name in this Message.\nIf multiple Headers of this header name exist in the message,\nthe first header in the message is returned.",
   :var-type "function",
   :line 45,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([request]),
   :name "inc-sequence-number!",
   :namespace "cljain.sip.message",
   :source-url nil,
   :added "0.3.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.message-api.html#cljain.sip.message/inc-sequence-number!",
   :doc "Increase the sequence number of a request's CSeq header.",
   :var-type "function",
   :line 157,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([request]),
   :name "method",
   :namespace "cljain.sip.message",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.message-api.html#cljain.sip.message/method",
   :doc
   "DEPRECATED: Use Java method 'getMethod' directly instead.\nGets method string of this Request message.",
   :var-type "function",
   :line 134,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([message]),
   :name "raw-content",
   :namespace "cljain.sip.message",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.3.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.message-api.html#cljain.sip.message/raw-content",
   :doc
   "DEPRECATED: Use Java method 'getRawContent' directly instead.\nGets the body content of the Message as a byte array.",
   :var-type "function",
   :line 104,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([response]),
   :name "reason",
   :namespace "cljain.sip.message",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.message-api.html#cljain.sip.message/reason",
   :doc "Gets the reason phrase of this Response message.",
   :var-type "function",
   :line 151,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([message]),
   :name "remove-content!",
   :namespace "cljain.sip.message",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.3.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.message-api.html#cljain.sip.message/remove-content!",
   :doc
   "DEPRECATED: Use Java method 'removeContent' directly instead.\nRemoves the body content from this Message and all associated entity headers,\nif a body exists, this method returns sliently if no body exists.",
   :var-type "function",
   :line 125,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([message header-name]),
   :name "remove-header!",
   :namespace "cljain.sip.message",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.message-api.html#cljain.sip.message/remove-header!",
   :doc
   "DEPRECATED: Use Java method 'removeHeader' directly instead.\nRemoves the Header of the supplied name from the list of headers in this Message.\nIf multiple headers exist then they are all removed from the header list.\nIf no headers exist then this method returns silently.\nThis method should not be used to remove required Headers, required Headers should be\nreplaced using the 'set-header!'.",
   :var-type "function",
   :line 83,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([method req-uri from call-id & more-headers]),
   :name "request",
   :namespace "cljain.sip.message",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url "/cljain.sip.message-api.html#cljain.sip.message/request",
   :doc
   "Creates a new Request message of type specified by the method paramater,\ncontaining the URI of the Request, the mandatory headers of the message.\nThis new Request does not contain a body.",
   :var-type "function",
   :line 15,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([status-code reqest & more-headers]),
   :name "response",
   :namespace "cljain.sip.message",
   :source-url nil,
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.message-api.html#cljain.sip.message/response",
   :doc
   "Creates a new Response message of type specified by the status-code paramater,\nbased on a specific Request message. This new Response does not contain a body.\nOnly the required headers are copied from the Request.",
   :var-type "function",
   :line 32,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([message type-header content]),
   :name "set-content!",
   :namespace "cljain.sip.message",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.message-api.html#cljain.sip.message/set-content!",
   :doc
   "DEPRECATED: Use Java method 'setContent' directly instead.\nSets the new Header to replace existings Header of that type in the message.\nIf the SIP message contains more than one Header of the new Header type it should\nreplace the first occurance of this Header and removes all other Headers of this type.\nIf no Header of this type exists this header is added to the end of the SIP Message.\nThis method should be used to change required Headers and overwrite optional Headers.",
   :var-type "function",
   :line 112,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([message header]),
   :name "set-header!",
   :namespace "cljain.sip.message",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.message-api.html#cljain.sip.message/set-header!",
   :doc
   "DEPRECATED: Use Java method 'setHeader' directly instead.\nSets the new Header to replace existings Header of that type in the message.\nIf the SIP message contains more than one Header of the new Header type it should\nreplace the first occurance of this Header and removes all other Headers of this type.\nIf no Header of this type exists this header is added to the end of the SIP Message.\nThis method should be used to change required Headers and overwrite optional Headers.",
   :var-type "function",
   :line 55,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([response]),
   :name "status-code",
   :namespace "cljain.sip.message",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.message-api.html#cljain.sip.message/status-code",
   :doc
   "DEPRECATED: Use Java method 'getStatusCode' directly instead.\nGets the integer value of the status code of Response,\nwhich identifies the outcome of the request to which this response is related.",
   :var-type "function",
   :line 142,
   :file "src/cljain/sip/message.clj"}
  {:arglists ([transaction]),
   :name "application-data",
   :namespace "cljain.sip.transaction",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.transaction-api.html#cljain.sip.transaction/application-data",
   :doc
   "DEPRECATED: Use Java method 'getApplicationData' directly instead.\nReturns the application data associated with the transaction.\nThis specification does not define the format of this application specific data.",
   :var-type "function",
   :line 66,
   :file "src/cljain/sip/transaction.clj"}
  {:arglists ([transaction]),
   :name "branch-id",
   :namespace "cljain.sip.transaction",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.transaction-api.html#cljain.sip.transaction/branch-id",
   :doc
   "DEPRECATED: Use Java method 'getBranchId' directly instead.\nReturns a unique branch identifer that identifies this transaction.\nThe branch identifier is used in the ViaHeader. The uniqueness property of the\nbranch ID parameter to facilitate its use as a transaction ID, was not part of RFC 2543.\nThe branch ID inserted by an element compliant with the RFC3261 specification MUST always\nbegin with the characters \"z9hG4bK\". These 7 characters are used as a magic cookie,\nso that servers receiving the request can determine that the branch ID was constructed\nto be globally unique. The precise format of the branch token is implementation-defined.\nThis method should always return the same branch identifier for the same transaction.",
   :var-type "function",
   :line 84,
   :file "src/cljain/sip/transaction.clj"}
  {:arglists ([transaction]),
   :name "request",
   :namespace "cljain.sip.transaction",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.transaction-api.html#cljain.sip.transaction/request",
   :doc
   "DEPRECATED: Use Java method 'getRequest' directly instead.\nReturns the request that created this transaction.\nThe transaction state machine needs to keep the Request that resulted in the creation\nof this transaction while the transaction is still alive. Applications also need to access\nthis information, e.g. a forking proxy server may wish to retrieve the original Invite\nrequest to cancel branches of a fork when a final Response has been received by one branch.",
   :var-type "function",
   :line 8,
   :file "src/cljain/sip/transaction.clj"}
  {:arglists ([client-transaction]),
   :name "send-request!",
   :namespace "cljain.sip.transaction",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.transaction-api.html#cljain.sip.transaction/send-request!",
   :doc
   "DEPRECATED: Use Java method 'sendRequest' directly instead.\nSends the Request which created this ClientTransaction.\nWhen an application wishes to send a Request message, it creates a Request from the\nMessageFactory and then creates a new ClientTransaction from 'cljain.core/new-client-transcation!'.\nCalling this method on the ClientTransaction sends the Request onto the network.\nThe Request message gets sent via the ListeningPoint information of the SipProvider that\nis associated to this ClientTransaction.\n\nThis method assumes that the Request is sent out of Dialog.\nIt uses the Router to determine the next hop. If the Router returns a empty iterator,\nand a Dialog is associated with the outgoing request of the Transaction then the Dialog route set\nis used to send the outgoing request.\n\nThis method implies that the application is functioning as either a UAC or a stateful proxy,\nhence the underlying implementation acts statefully.",
   :var-type "function",
   :line 20,
   :file "src/cljain/sip/transaction.clj"}
  {:arglists ([server-transaction response]),
   :name "send-response!",
   :namespace "cljain.sip.transaction",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.transaction-api.html#cljain.sip.transaction/send-response!",
   :doc
   "DEPRECATED: Use Java method 'sendResponse' directly instead.\nSends the Response to a Request which is associated with this ServerTransaction.\nWhen an application wishes to send a Response, it creates a Response using the\nMessageFactory and then passes that Response to this method. The Response message\ngets sent out on the network via the ListeningPoint information that is associated\nwith the SipProvider of this ServerTransaction.\n\nThis method implies that the application is functioning as either a UAS or\na stateful proxy, hence the underlying implementation acts statefully.\nWhen a UAS sends a 2xx response to an INVITE, the server transaction is\ntransitions to the TerminatedState. The implementation may delay physically\nremoving ServerTransaction record from memory to catch retransmissions of the INVITE\nin accordance with the reccomendation of http://bugs.sipit.net/show_bug.cgi?id=769 .",
   :var-type "function",
   :line 44,
   :file "src/cljain/sip/transaction.clj"}
  {:arglists ([transaction data]),
   :name "set-application-data!",
   :namespace "cljain.sip.transaction",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.transaction-api.html#cljain.sip.transaction/set-application-data!",
   :doc
   "DEPRECATED: Use Java method 'setApplicationData' directly instead.\nThis method allows applications to associate application context with the transaction.",
   :var-type "function",
   :line 75,
   :file "src/cljain/sip/transaction.clj"}
  {:arglists ([object]),
   :name "transaction?",
   :namespace "cljain.sip.transaction",
   :source-url nil,
   :deprecated "0.4.0",
   :added "0.2.0",
   :raw-source-url nil,
   :wiki-url
   "/cljain.sip.transaction-api.html#cljain.sip.transaction/transaction?",
   :doc
   "DEPRECATED: Use 'cljain.core/transaction?' instead.\nCheck the obj is an instance of javax.sip.Transaction.\nBoth ClientTransaction and ServerTransaction are pass.",
   :var-type "function",
   :line 99,
   :file "src/cljain/sip/transaction.clj"})}
